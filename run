#!/usr/bin/env python3

# SWE 45000, PIN FALL 2025
# TEAM 4
# PHASE 1 PROJECT

# DISCLAIMER: This file contains code either partially or entirely written by
# Artificial Intelligence.
"""
Executable CLI 'run' for Phase 1.

Usage:
  ./run install        -> installs dependencies from requirements.txt
  ./run test           -> runs test suite
  ./run URL_FILE       -> processes newline-delimited URLs and prints NDJSON
"""
from __future__ import annotations # Allows annotations (like return types) to be postponed and interpreted as strings
from src.utils.logging import logger
# ----------------------------
# Standard library imports
# ----------------------------
import argparse      # for parsing command line arguments
import importlib     # for dynamic module importing
import json          # for encoding/decoding JSON
import logging       # for logging info/errors
import os            # for environment variables & file operations
import pkgutil       # for discovering Python modules
import subprocess    # for running external processes
import sys           # for system-specific functions
import time
import shutil
import stat
import io
from contextlib import redirect_stdout, redirect_stderr


from concurrent.futures import ThreadPoolExecutor, as_completed  # for parallel tasks
from pathlib import Path       # for safer path operations
from typing import Any, Dict, List, Tuple, Callable  # type hints

os.environ.setdefault("HF_HUB_DISABLE_PROGRESS_BARS", "1")
os.environ.setdefault("TQDM_DISABLE", "1")  # extra belt-and-suspenders

REPO_ROOT = Path(__file__).resolve().parent
SRC_DIR = REPO_ROOT / "src"

# Make imports like `import src...` work in this process
for p in (str(REPO_ROOT), str(SRC_DIR)):
    if p not in sys.path:
        sys.path.insert(0, p)

# Ensure child processes (pytest/coverage) inherit it too
_prev = os.environ.get("PYTHONPATH", "")
parts = [str(REPO_ROOT), str(SRC_DIR)]
if _prev:
    parts.append(_prev)
os.environ["PYTHONPATH"] = os.pathsep.join(parts)


def remove_readonly(func, path, excinfo):
    """Error handler for shutil.rmtree that removes read-only permissions."""
    os.chmod(path, stat.S_IWRITE)
    func(path)

# ----------------------------
# Install / Test handlers
# ----------------------------
def run_subprocess(cmd: List[str]) -> int: # cmd is a variable of type: List[string], and (-> int), means return type int
    """Run a subprocess command and return exit code."""
    try:
        result = subprocess.run(cmd, check=False) 
        return result.returncode
    except Exception as exc:  # safety net
        logger.error("Subprocess failed: %s", exc)
        return 1
        
# --- AUTOGRADER BOOTSTRAP HELPERS ---
def _have(mod: str) -> bool:
    try:
        import importlib.util
        return importlib.util.find_spec(mod) is not None
    except Exception:
        return False

def _pip_install(*args: str) -> int:
    # install into the exact interpreter the grader is using
    return run_subprocess([sys.executable, "-m", "pip", *args])

def ensure_test_deps() -> None:
    # runtime deps
    if Path("requirements.txt").exists():
        _pip_install("install", "--no-cache-dir", "-r", "requirements.txt")
    # dev/test deps
    if Path("requirements-dev.txt").exists():
        _pip_install("install", "--no-cache-dir", "-r", "requirements-dev.txt")
    # fallback if grader ignored requirements-dev.txt
    if not (_have("pytest") and _have("coverage")):
        _pip_install("install", "--no-cache-dir", "pytest", "pytest-cov", "pytest-mock", "coverage")



def handle_install() -> int:
    """Install dependencies from requirements.txt (and dev deps if present)."""
    rc = 0
    req = Path("requirements.txt")
    if req.exists():
        rc = run_subprocess([sys.executable, "-m", "pip", "install", "-r", str(req)])
        if rc != 0:
            logger.error("Dependency installation failed (exit %d)", rc)
            return rc

    dev = Path("requirements-dev.txt")
    if dev.exists():
        run_subprocess([sys.executable, "-m", "pip", "install", "-r", str(dev)])

    return rc


def handle_test() -> int:
    """
    Print exactly one line:
      'X/Y test cases passed. Z% line coverage achieved.'
    and exit 0 (the grader just parses that line).
    """
    import tempfile, xml.etree.ElementTree as ET, importlib.util, subprocess, sys, os

    # Keep plugins quiet & make 'src' imports work
    # os.environ.setdefault("PYTEST_DISABLE_PLUGIN_AUTOLOAD", "1")
    os.environ.setdefault("PYTHONPATH", os.pathsep.join([os.getcwd(), str(Path.cwd() / "src")]))

    # 1) Run pytest once, capture counts from JUnit XML (authoritative)
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xml") as tf:
        junit_path = tf.name
    p = subprocess.run(
        [sys.executable, "-m", "pytest", "-q", f"--junitxml={junit_path}"],
        text=True, capture_output=True
    )

    passed = total = 0
    try:
        root = ET.parse(junit_path).getroot()
        node = root if root.tag == "testsuite" else root.find("testsuite")
        if node is not None:
            tests   = int(node.attrib.get("tests", "0"))
            fails   = int(node.attrib.get("failures", "0"))
            errors  = int(node.attrib.get("errors", "0"))
            skipped = int(node.attrib.get("skipped", "0"))
            total   = tests
            passed  = tests - fails - errors - skipped
    except Exception:
        # very small fallback
        out = p.stdout or ""
        passed = out.count(".")
        total  = max(passed, 0)

    # 2) Coverage percent (quiet). Scope to src/ if you want, or whole repo.
    cov_pct = "0"
    if importlib.util.find_spec("coverage") is not None:
        subprocess.run([sys.executable, "-m", "coverage", "erase"], text=True, capture_output=True)
        subprocess.run([sys.executable, "-m", "coverage", "run", "-m", "pytest", "-q"],
                       text=True, capture_output=True)
        rep = subprocess.run([sys.executable, "-m", "coverage", "report", "-m"],
                             text=True, capture_output=True)
        for ln in (rep.stdout or "").splitlines()[::-1]:
            parts = ln.split()
            if parts and parts[-1].endswith("%"):
                cov_pct = parts[-1].rstrip("%")
                break

    # 3) EXACTLY one stdout line:
    print(f"{passed}/{total} test cases passed. {cov_pct}% line coverage achieved.")
    return 0  # always success for the grader




# ----------------------------
# URL classification (upd version, fixed?)
# ----------------------------
from urllib.parse import urlparse

def classify_url(url: str) -> str:
    """
    Return one of: MODEL | DATASET | CODE
    - HuggingFace datasets -> DATASET
    - HuggingFace models/Spaces/etc. -> MODEL
    - GitHub/GitLab/Bitbucket -> CODE
    - Everything else -> CODE
    """
    if not isinstance(url, str):
        return "CODE"

    u = url.strip()
    if not u:
        return "CODE"

    p = urlparse(u)
    host = (p.netloc or "").lower()
    path = (p.path or "").lower().lstrip("/")

    if host.endswith("huggingface.co"):
        if path.startswith("datasets/"):
            return "DATASET"
        return "MODEL"

    if host in {"github.com", "gitlab.com", "bitbucket.org"}:
        return "CODE"

    return "CODE"


# ----------------------------
# Dynamic Metric Loader
# ----------------------------
def load_metrics() -> Dict[str, Callable[[Dict[str, Any]], Tuple[float, int]]]:
    """Import metric modules from src/metrics; skip or silence ones that fail/print."""
    metrics: Dict[str, Callable] = {}
    metrics_pkg = "src.metrics"
    try:
        package = importlib.import_module(metrics_pkg)
    except ModuleNotFoundError:
        logger.debug("metrics package not found; proceeding with none")
        return metrics

    for _, mod_name, is_pkg in pkgutil.iter_modules(package.__path__, package.__name__ + "."):
        if is_pkg:
            continue
        try:
            # silence *any* print() in module top-level during import
            with redirect_stdout(io.StringIO()), redirect_stderr(io.StringIO()):
                module = importlib.import_module(mod_name)
        except Exception as e:
            logger.debug("Skipping metric %s (import failed): %s", mod_name, e)
            continue
        func = getattr(module, "metric", None)
        if callable(func):
            metrics[mod_name.split(".")[-1]] = func
    return metrics




# ----------------------------
# Metric computation (upd version, fixed?)
# ----------------------------
def compute_metrics_for_model(resource: Dict[str, Any]) -> Dict[str, Any]:
    """
    Compute all metrics for a single model resource, correctly handling size_score dict.
    Ensures 'category' is always a string per spec: MODEL | DATASET | CODE.
    """
    metrics, results = load_metrics(), {}
    with ThreadPoolExecutor() as executor:
        future_to_metric = {executor.submit(func, resource): name for name, func in metrics.items()}
        for future in as_completed(future_to_metric):
            name = future_to_metric[future]
            try:
                # Store the raw result (could be tuple or dict tuple)
                results[name] = future.result() 
            except Exception as e:
                logger.error(f"Metric '{name}' failed for '{resource['name']}': {e}")
                # Provide default structure based on metric type
                results[name] = ({key: 0.0 for key in ["raspberry_pi", "jetson_nano", "desktop_pc", "aws_server"]}, 0) if name == 'size' else (0.0, 0)

    # Initialize output dictionary
    out = {"name": resource.get("name"), "category": "MODEL", "url": resource.get("url")}
    metric_scores, total_latency = [], 0
    
    # Process results, adding to 'out' dictionary
    for name, result_tuple in results.items():
        # Unpack carefully, expecting (score, latency)
        score, latency = result_tuple if isinstance(result_tuple, tuple) and len(result_tuple) == 2 else (None, 0)
        
        total_latency += latency
        latency_key = f"{name}_latency"
        
        if name == 'category': # Special case for category
            # Score here is the category name string, but we ignore it for net score
            # Latency is correctly unpacked above
            out[latency_key] = latency
            continue # Don't process category score further
        
        if name == 'size':
            # Score *is* the dictionary here
            score_dict = score if isinstance(score, dict) else {key: 0.0 for key in ["raspberry_pi", "jetson_nano", "desktop_pc", "aws_server"]}
            out['size_score'] = score_dict # Assign the dictionary directly
            out['size_score_latency'] = latency
            out['size_latency'] = latency # Add both latency keys
            if score_dict: # Calculate average for net_score
                avg_score = sum(score_dict.values()) / len(score_dict) if len(score_dict) > 0 else 0.0
                metric_scores.append(avg_score)
        else: # Handle all other metrics (expected float score)
            score_val = float(max(0.0, min(1.0, score or 0.0)))
            out[name] = score_val
            out[latency_key] = latency
            metric_scores.append(score_val)
            
    # --- Net score calculation ---
    out["net_score"] = round(sum(metric_scores) / len(metric_scores), 4) if metric_scores else 0.0
    out["net_score_latency"] = int(total_latency)

    return out

# ----------------------------
# URL File Processing (upd version, fixed?)
# ----------------------------
def process_url_file(path_str: str) -> int:
    """
    Read URL file (code_url, dataset_url, model_url).
    Only model URLs produce NDJSON output.
    """
    try:
        from src.utils.repo_cloner import clone_repo_to_temp
    except Exception:
        clone_repo_to_temp = None
    try:
        from src.utils.github_link_finder import find_github_url_from_hf
    except Exception:
        find_github_url_from_hf = None

    p = Path(path_str)
    if not p.exists():
        print(f"Error: URL file not found: {path_str}", file=sys.stderr)
        return 1

    import csv as _csv
    resources: List[Dict[str, Any]] = []

    with p.open("r", encoding="utf-8") as fh:
        reader = _csv.reader(fh)
        for row in reader:
            row = [part.strip() for part in row if part and part.strip()]
            code_url = dataset_url = model_url = None

            if len(row) == 1:
                url = row[0]
                cat = classify_url(url)
                if cat == "MODEL":
                    model_url = url
                elif cat == "DATASET":
                    dataset_url = url
                else:
                    code_url = url
            else:
                parts = (row + ["", "", ""])[:3]
                code_url, dataset_url, model_url = (
                    parts[0] or None, parts[1] or None, parts[2] or None
                )

            chosen = model_url or dataset_url or code_url
            name = None
            if chosen:
                if "huggingface.co" in chosen:
                    path_parts = chosen.split("huggingface.co/")[-1].split("/")
                    name = "/".join(path_parts[:2])  # enforce namespace/repo format
                elif "github.com" in chosen:
                    name = "/".join(chosen.rstrip("/").split("/")[-2:])
                else:
                    name = chosen.rstrip("/").split("/")[-1]


            resources.append({
                "code_url": code_url,
                "dataset_url": dataset_url,
                "model_url": model_url,
                "category": classify_url(chosen) if chosen else "CODE",
                "name": name or "unknown",
                "url": chosen,
            })

    # Only process model URLs
    models = [r for r in resources if r.get("model_url") and classify_url(r["model_url"]) == "MODEL"]

    for r in models:
        repo_to_clone = None
        model_url = r.get("model_url", "")

        if "github.com" in model_url:
            repo_to_clone = model_url
        elif "huggingface.co" in model_url and find_github_url_from_hf:
            try:
                with redirect_stdout(io.StringIO()), redirect_stderr(io.StringIO()):
                    repo_to_clone = find_github_url_from_hf(r["name"])
            except Exception:
                repo_to_clone = None

        if repo_to_clone and clone_repo_to_temp:
            try:
                with redirect_stdout(io.StringIO()), redirect_stderr(io.StringIO()):
                    local_dir = clone_repo_to_temp(repo_to_clone)
                r["local_path"] = local_dir
                r["local_dir"] = local_dir
            except Exception:
                r["local_path"] = None
                r["local_dir"] = None
        else:
            r["local_path"] = None
            r["local_dir"] = None

        # Compute metrics safely
        try:
            with redirect_stdout(io.StringIO()), redirect_stderr(io.StringIO()):
                result = compute_metrics_for_model(r)
        except Exception:
            result = {
                "name": r.get("name", "unknown"),
                "category": "MODEL",
                "url": r.get("model_url") or r.get("url"),
                "net_score": 0.0,
                "net_score_latency": 0,
            }

        sys.stdout.write(json.dumps(result, ensure_ascii=False, separators=(",", ":")) + "\n")
        sys.stdout.flush()

        # cleanup cloned repo
        local = r.get("local_path") or r.get("local_dir")
        if local:
            try:
                shutil.rmtree(local, onerror=remove_readonly)
            except Exception:
                pass

    return 0


# ----------------------------
# CLI Entrypoint
# ----------------------------
def main(argv: List[str] | None = None) -> int:
    # Setup command line parser
    parser = argparse.ArgumentParser(prog="run", description="Phase 1 CLI for trustworthy model reuse")
    parser.add_argument("arg", nargs="?", help="install | test | URL_FILE")
    args = parser.parse_args(argv)
    
    # If no arguments -> show help
    if args.arg is None:
        parser.print_help()
        return 1

    # Handle install/test/file
    if args.arg == "install":
        return handle_install()
    if args.arg == "test":
        return handle_test()

    # Otherwise, treat it as a file
    return process_url_file(args.arg)

# If run directly, call main() and exit with this code
if __name__ == "__main__":
    sys.exit(main())
